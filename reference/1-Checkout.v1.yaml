openapi: 3.0.0
info:
  title: WebCheckOut
  version: '1.0'
  description: 'With WebCheckout your site gets a URL to which your user will be redirected to perform the transactional process. In this way, you avoid catching sensitive information and definition for an interface of payment process.'
servers:
  - url: 'https://authe-ptp.herokuapp.com/'
    description: WebCheckOut authenticacion
paths:
  '':
    post:
      summary: GetAutentication structure
      operationId: post-ERE
      responses:
        '200':
          description: OK
      tags:
        - Authentication
    parameters: []
  api/session:
    parameters: []
    post:
      summary: CreateRequest Subscription
      operationId: postapi-session
      responses:
        '200':
          description: OK
      tags:
        - Create Request
  api/session/:
    post:
      summary: CreateRequest
      operationId: post-api-session
      responses:
        '200':
          description: OK
      tags:
        - Create Request
    parameters: []
  /api/session/:
    post:
      summary: Request Mix
      operationId: post-api-session
      responses:
        '200':
          description: OK
      tags:
        - Create Request
  /api/collect:
    post:
      summary: Collect Request
      operationId: post-api-collect
      responses:
        '200':
          description: OK
      tags:
        - Recurring payment
  /api/reverse:
    get:
      summary: Reverse payment
      tags:
        - Reverse payment
      responses: {}
      operationId: get-api-reverse
  /api/session/REQUEST_ID:
    get:
      summary: Request Information
      tags:
        - Request information
      responses: {}
      operationId: get-api-session-REQUEST_ID
      description: "With WebCheckout your site gets a URL to which your user will be redirected to perform the transactional process. In this way, you avoid catching sensitive information and definition for an interface of payment process.\nWebcheckout API is based on REST, returns answers with JSON coding. To make use of this service it is necessary that your site connect using Version 1.2 of TLS.\nYou can use the WebCheckout API in test mode, which does not interact with banking networks. Depending on the endpoint used in the application determines whether it is in productive mode or in test mode.\n•\tTest mode: https://test.placetopay.com/redirection/api/session/\n•\tProductive mode: https://checkout.placetopay.com\nConsiderations:\nThe URL is needed where data will be sent by using post (endpoint) method.\nJSON should be used for sending authentication parameters, payment information and control data.\nJSON should be used for sending authentication parameters, payment information and control data.\nImportant: The expiration is the maximum time given for the session, if a user does not perform the operation, the session is pending until expiration.\n\n* `The return URL (Returnurl) is used to redirect the user once the operation is finished. It is recommended to send a data to the URL with which the site can identify the record for example: https://mysite.com/response/ireference}`.\nConfigure a notification URL on your server using ports `80` or `443` and in case the payment is decline or approved, receive a notification by post as an asynchronous way`.\n\n**Important**: This notification URL must be supplied to Placetopay for its configuration.\n\n**PROCESS OF INTEGRATION**\n\n1. At the moment, user proceed with operation on your site, you must consume the createrequest method.\n2. If the request is processed correctly, the service creates a session and returns an answer:\n*  `Requestid` identifier\n* `ProcessURL` `Processing URL`.\n\n3. Create a record in your system, it relates that record to the `Requestid` and grants a pending status.\n4. It redirects the user to the `ProcessURL` obtained in point 2.\n5. In Web Checkout interface, the user going to make the payment or subscription process where the information must be filled to process payment.\n6. Subsequently, the user must select payment method which the purchase will be added by entering data from payment method.\n7.\tOnce user performs the process and click on \"Return to commerce\", it is sent to the Returnurl return URL (specified attribute when creating a\t operation).\n8.\tBack to commerce, with RequestiD registred you must consult placetopay the status of the session using the GetRequestInformation method.\n9.\tRun your business rule according to status obtained, to update status of it in your database.\n10.\tAsynchronously, Placetopay performs a notification, final status of a session, to your site.\n11.\tWe recommend implement a probe process to resolve those transactions that were not resolved at sections 7 and 9\n\n**Checkout Web Interface Methods**\n\nWeb Service contains different methods where use request - response type operations are executed, these require for each one, income parameters that are used by data structures, which information is processed to subsequently return a response. If you want to run a method, you can quickly use any of them on the left and simulate it on  right side of documentation.\n\n\n**Servers**\n\nWebCheckOut Authenticacion https://authe-ptp.herokuapp.com/\nWebCheckOut Redirection https://checkout.placetopay.ws/\nWebCheckOut Pruebas_Redirección https://test.placetopay.com/redirection/\n\n\n"
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
